{"ast":null,"code":"var _jsxFileName = \"/home/user/codenation/react-17/src/routes/AuthorizeRoute.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authCallbackError, authCallbackSucess } from '../actions';\nimport { getInfoFromUrlHash } from '../modules/url';\nimport { Authorize } from '../containers';\n\nconst AuthorizeRoute = () => {\n  const [redirect, setRedirect] = useState(false); //const isLogged = useSelector(state => state.auth.isLogged);\n\n  const dispatch = useDispatch();\n  const urlHash = window.location.hash;\n  useEffect(() => {\n    const hashData = getInfoFromUrlHash(urlHash);\n\n    if (hashData.error) {\n      dispatch(authCallbackError(hashData.error));\n      return;\n    }\n\n    dispatch(authCallbackSucess(hashData));\n  }, [dispatch, urlHash]);\n  useEffect(() => {\n    if (isLogged) {\n      setTimeout(() => setRedirect(true), 3000);\n    }\n  }, [isLogged]);\n\n  if (redirect) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/dashboard'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Authorize, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  });\n};\n\nexport default AuthorizeRoute;","map":{"version":3,"sources":["/home/user/codenation/react-17/src/routes/AuthorizeRoute.jsx"],"names":["React","useEffect","useState","Redirect","useDispatch","useSelector","authCallbackError","authCallbackSucess","getInfoFromUrlHash","Authorize","AuthorizeRoute","redirect","setRedirect","dispatch","urlHash","window","location","hash","hashData","error","isLogged","setTimeout","pathname"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,iBAAT,EAA4BC,kBAA5B,QAAsD,YAAtD;AAEA,SAASC,kBAAT,QAAmC,gBAAnC;AAEA,SAASC,SAAT,QAA0B,eAA1B;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,KAAD,CAAxC,CAD2B,CAE3B;;AACA,QAAMW,QAAQ,GAAGT,WAAW,EAA5B;AAEA,QAAMU,OAAO,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhC;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,QAAQ,GAAGV,kBAAkB,CAACM,OAAD,CAAnC;;AAEA,QAAII,QAAQ,CAACC,KAAb,EAAoB;AAClBN,MAAAA,QAAQ,CAACP,iBAAiB,CAACY,QAAQ,CAACC,KAAV,CAAlB,CAAR;AAEA;AACD;;AAEDN,IAAAA,QAAQ,CAACN,kBAAkB,CAACW,QAAD,CAAnB,CAAR;AACD,GAVQ,EAUN,CAACL,QAAD,EAAWC,OAAX,CAVM,CAAT;AAYAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,QAAJ,EAAc;AACZC,MAAAA,UAAU,CACR,MAAMT,WAAW,CAAC,IAAD,CADT,EAER,IAFQ,CAAV;AAGD;AACF,GANQ,EAMN,CAACQ,QAAD,CANM,CAAT;;AAQA,MAAIT,QAAJ,EAAc;AACZ,wBAAQ,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEW,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACD;;AAED,sBAAQ,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACD,CAhCD;;AAkCA,eAAeZ,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { authCallbackError, authCallbackSucess } from '../actions';\n\nimport { getInfoFromUrlHash } from '../modules/url';\n\nimport { Authorize } from '../containers';\n\nconst AuthorizeRoute = () => {\n  const [redirect, setRedirect] = useState(false);\n  //const isLogged = useSelector(state => state.auth.isLogged);\n  const dispatch = useDispatch();\n\n  const urlHash = window.location.hash;\n\n  useEffect(() => {\n    const hashData = getInfoFromUrlHash(urlHash);\n\n    if (hashData.error) {\n      dispatch(authCallbackError(hashData.error));\n\n      return;\n    }\n\n    dispatch(authCallbackSucess(hashData));\n  }, [dispatch, urlHash]);\n\n  useEffect(() => {\n    if (isLogged) {\n      setTimeout(\n        () => setRedirect(true),\n        3000);\n    }\n  }, [isLogged]);\n\n  if (redirect) {\n    return (<Redirect to={{ pathname: '/dashboard' }} />);\n  }\n\n  return (<Authorize />);\n}\n\nexport default AuthorizeRoute;"]},"metadata":{},"sourceType":"module"}